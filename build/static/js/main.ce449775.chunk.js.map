{"version":3,"sources":["assets/logo.svg","pages/home/index.tsx","services/api.ts","components/Dropzone/index.tsx","pages/createPoint/index.tsx","routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","api","axios","create","baseURL","Dropzone","onFileUpLoaded","useState","selectedFileUrl","setSelectedFileUrl","onDrop","useCallback","acceptedFiles","file","fileUrl","URL","createObjectURL","useDropzone","accept","getRootProps","getInputProps","CreatePoint","items","setItems","ufs","setUfs","cities","setCities","initialPosition","setInitialPosition","name","email","whatsapp","formData","setFormData","selectedUf","setSelectedUf","selectedCity","setSelectedCity","selectedItems","setSelectedItems","selectedPosition","setSelectedPosition","selectedFile","setSelectedFile","history","useHistory","handleInputChange","event","target","value","a","preventDefault","uf","city","latitude","longitude","data","FormData","append","String","join","post","alert","push","useEffect","navigator","geolocation","getCurrentPosition","position","coords","get","then","response","ufInitials","map","sigla","cityNames","nome","onSubmit","htmlFor","type","onChange","Map","center","zoom","onClick","latlng","lat","lng","TileLayer","attribution","url","Marker","console","log","key","item","findIndex","filteredItems","filter","handleSelectedItem","includes","image_url","title","Routes","component","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce449775.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.26434f1f.svg\";","import React from 'react';\r\nimport { FiLogIn } from 'react-icons/fi';\r\nimport { Link } from 'react-router-dom'; //para não ter o recarregamento da página e sim só do conteúdo, a aplicação fica mais perfomática.\r\n\r\nimport './styles.css';\r\n\r\nimport logo from '../../assets/logo.svg';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div id=\"page-home\">\r\n            <div className=\"content\">\r\n                <header>\r\n                    <img src={logo} alt=\"Ecoleta\"/>\r\n                </header>\r\n\r\n                <main>\r\n                    <h1>Seu marketplace de coleta de resíduos.</h1>\r\n                    <p>Ajudamos pessoas a encontrarem pontos de coleta de forma eficiente.</p>\r\n                    <Link to=\"/create-point\">\r\n                        <span>\r\n                            <FiLogIn />\r\n                        </span>\r\n                        <strong>Cadastre um ponto de coleta</strong>\r\n                    </Link>\r\n                </main>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:3333' //se um dia for colocar no ar, só trocar este endereço\r\n});\r\n\r\nexport default api;","import React, {useCallback, useState} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport { FiUpload } from 'react-icons/fi'\r\n\r\nimport './styles.css';\r\n\r\ninterface Props {\r\n    onFileUpLoaded: (file: File) => void; //void que não tem retorno\r\n}\r\n\r\nconst Dropzone: React.FC<Props> = ({onFileUpLoaded}) => {\r\n\r\n    const [selectedFileUrl, setSelectedFileUrl] = useState('');\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    const file = acceptedFiles[0];\r\n\r\n    const fileUrl = URL.createObjectURL(file);\r\n    setSelectedFileUrl(fileUrl);\r\n    onFileUpLoaded(file);\r\n  }, [onFileUpLoaded])\r\n\r\n  const {getRootProps, getInputProps} = useDropzone({\r\n      onDrop,\r\n      accept: 'image/*'\r\n  })\r\n\r\n  return (\r\n    <div className='dropzone' {...getRootProps()}>\r\n      <input {...getInputProps()} accept='image/*' />\r\n\r\n      { selectedFileUrl\r\n        ? <img src={selectedFileUrl} alt='Point thumbnail' />\r\n        : (\r\n            <p>\r\n                <FiUpload />\r\n                Imagem do estabelecimento\r\n            </p>\r\n        )\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dropzone;","import React, {useEffect, useState, ChangeEvent, FormEvent} from 'react';\r\nimport { Link, useHistory} from 'react-router-dom';\r\nimport { FiArrowLeft } from 'react-icons/fi';\r\nimport { Map, TileLayer, Marker} from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport { LeafletMouseEvent } from 'leaflet';\r\nimport api from '../../services/api';\r\nimport Dropzone from '../../components/Dropzone';\r\n\r\nimport './styles.css';\r\n\r\nimport logo from '../../assets/logo.svg';\r\n\r\n//Interface\r\ninterface Item {\r\n    id: number;\r\n    title: string;\r\n    image_url: string;\r\n}\r\n\r\ninterface IBGEUFResponse {\r\n    sigla: string;\r\n}\r\n\r\ninterface IBGECityResponse {\r\n    nome: string;\r\n}\r\n\r\nconst CreatePoint = () => {\r\n    //toda vez que mudo algo aqui na função, ela é executada de novo\r\n\r\n    //criaremos um estado\r\n    const [items, setItems] = useState<Item[]>([]);\r\n    const [ufs, setUfs] = useState<string[]>([]);\r\n    const [cities, setCities] = useState<string[]>([]);\r\n\r\n    const [initialPosition, setInitialPosition] = useState<[number, number]>([0, 0]);\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        whatsapp: '',\r\n    })\r\n\r\n    //vai armazenar qual uf selecionada\r\n    const [selectedUf, setSelectedUf] = useState('0'); //zero pq é o value do opção selecione\r\n    const [selectedCity, setSelectedCity] = useState('0');\r\n    const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n    const [selectedPosition, setSelectedPosition] = useState<[number, number]>([0, 0]); // como é pra latitude e longitude, recebe 2 números em um array\r\n    const [selectedFile, setSelectedFile] = useState<File>();\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        //posição inicial do usuário assim que abrir a aplicação\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const { latitude, longitude } = position.coords\r\n            setInitialPosition([\r\n                latitude,\r\n                longitude\r\n            ])\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        api.get('items').then(response => {\r\n            setItems(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get<IBGEUFResponse[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados?orderBy=nome').then(response => {\r\n            const ufInitials = response.data.map(uf => uf.sigla);\r\n\r\n            setUfs(ufInitials);\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        //quando selecionar o uf, vai mostrar os municipios\r\n        // carregar as cidades sempre que a uf mudar\r\n        if(selectedUf === '0') {\r\n            return;\r\n        }\r\n\r\n        axios.get<IBGECityResponse[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`).then(response => {\r\n            const cityNames = response.data.map(city => city.nome);\r\n\r\n            setCities(cityNames);\r\n        })\r\n\r\n    }, [selectedUf]);\r\n\r\n    // estou alterando o valor de um html selecionando o elemento . variavel global do react\r\n    function handleSelectedUf(event: ChangeEvent<HTMLSelectElement>) {\r\n        const uf = event.target.value;\r\n\r\n        console.log(selectedFile);\r\n\r\n        setSelectedUf(uf);\r\n    }\r\n\r\n    function handleSelectedCity(event: ChangeEvent<HTMLSelectElement>) {\r\n        const city = event.target.value;\r\n\r\n        setSelectedCity(city);\r\n    }\r\n\r\n    function handleMapClick(event: LeafletMouseEvent) {\r\n        setSelectedPosition([\r\n            event.latlng.lat,\r\n            event.latlng.lng\r\n        ])\r\n    }\r\n\r\n    //armazenar os dados\r\n    function handleInputChange(event: ChangeEvent<HTMLInputElement>) {\r\n        const { name, value } = event.target;\r\n\r\n        setFormData({ ...formData, [name]: value }); //informa variavel como  propriedade [name]: sem precisar ficar colocando de maneira manual\r\n    }\r\n\r\n    //pegando o item\r\n    function handleSelectedItem(id: number){\r\n        const alreadySelected = selectedItems.findIndex(item => item === id);\r\n\r\n        if( alreadySelected >= 0 ){\r\n            const filteredItems = selectedItems.filter(item => item !== id); //filtrando a lista de items selecionados, pegando o item que queremos remover do selecionado\r\n            setSelectedItems(filteredItems);\r\n        } else{\r\n            setSelectedItems([ ...selectedItems, id ]);\r\n        }\r\n    }\r\n\r\n    //submeter o formulario, envio pra api\r\n    async function handleSubmit(event: FormEvent) {\r\n        event.preventDefault();\r\n\r\n        const { name, email, whatsapp } = formData;\r\n        const uf = selectedUf;\r\n        const city = selectedCity;\r\n        const [ latitude, longitude ] = selectedPosition;\r\n        const items = selectedItems;\r\n\r\n        const data = new FormData();\r\n\r\n        data.append('name', name);\r\n        data.append('email', email);\r\n        data.append('whatsapp', whatsapp);\r\n        data.append('uf', uf);\r\n        data.append('city', city);\r\n        data.append('latitude', String(latitude));\r\n        data.append('longitude', String(longitude));\r\n        data.append('items', items.join(','));\r\n\r\n        if(selectedFile) {\r\n            data.append('image', selectedFile)\r\n        }\r\n\r\n        await api.post('points', data);\r\n\r\n        alert('ponto de coleta criado'); //depois mudar pra mensagem de cadastro concluido igual ao layout\r\n\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <div id=\"page-create-point\">\r\n            <header>\r\n            <img src={logo} alt=\"Ecoleta\"/>\r\n\r\n            <Link to=\"/\">\r\n                <span>\r\n                    <FiArrowLeft />\r\n                </span>\r\n                Voltar pra home\r\n            </Link>\r\n            </header>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <h1>Cadastro do <br />\r\n                ponto de coleta</h1>\r\n\r\n                <Dropzone\r\n                    onFileUpLoaded={setSelectedFile}\r\n                />\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Dados</h2>\r\n                    </legend>\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"name\">Nome da entidade</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            id=\"name\"\r\n                            onChange={handleInputChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"field-group\">\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"email\">E-mail</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                id=\"email\"\r\n                                onChange={handleInputChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"whatsapp\">Whatsapp</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"whatsapp\"\r\n                                id=\"whatsapp\"\r\n                                onChange={handleInputChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Endereço</h2>\r\n                        <span>Selecione o endereço no mapa</span>\r\n                    </legend>\r\n\r\n                    <Map\r\n                        center={initialPosition}\r\n                        zoom={15}\r\n                        onClick={handleMapClick}\r\n                    >\r\n                        <TileLayer\r\n                            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                        <Marker position={selectedPosition} />\r\n                    </Map>\r\n\r\n                    <div className=\"field-group\">\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"uf\">Estado (UF)</label>\r\n                            <select\r\n                                name=\"uf\"\r\n                                id=\"uf\"\r\n                                value={selectedUf}\r\n                                onChange={handleSelectedUf}\r\n                            >\r\n                                <option value=\"0\">Selecione uma UF</option>\r\n                                {ufs.map(uf => (\r\n                                    <option key={uf} value={uf}>{uf}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"city\">Cidade</label>\r\n                            <select\r\n                                name=\"city\"\r\n                                id=\"city\"\r\n                                value={selectedCity}\r\n                                onChange={handleSelectedCity}\r\n                            >\r\n                                <option value=\"0\">Selecione uma cidade</option>\r\n                                {cities.map(city => (\r\n                                    <option key={city} value={city}>{city}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Ítens de coleta</h2>\r\n                        <span>Selecione o endereço no mapa</span>\r\n                    </legend>\r\n                    <ul className=\"items-grid\">\r\n                        {/* colocando o li pelo número de x que tenho de items na api\r\n                        esse map ele me permite fazer uma varredura do array e retornar algo.\r\n                        O primeiro item do array é sempre necessário tem um key, senão dará erro no console, valor único do array.\r\n                        selectedItems.includes(item.id) ? 'selected' : '' se já incluiu coloca a class selected : é um senão deixa vazio\r\n                        */}\r\n                        {items.map(item => (\r\n                            <li\r\n                                key={item.id}\r\n                                onClick={() => handleSelectedItem(item.id)}\r\n                                className={selectedItems.includes(item.id) ? 'selected' : ''}\r\n                            >\r\n                                <img src={item.image_url} alt={item.title} />\r\n                                <span>{item.title}</span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </fieldset>\r\n                <button type=\"submit\">Cadastrar ponto de coleta</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreatePoint;","import React from 'react';\r\nimport { Route, BrowserRouter } from 'react-router-dom';\r\n\r\nimport Home from './pages/home';\r\nimport CreatePoint from './pages/createPoint';\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Route component={Home} path=\"/\" exact />\r\n            <Route component={CreatePoint} path=\"/create-point\" />\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Routes from './routes';\r\n\r\nfunction App() {\r\n  return (\r\n    <Routes />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}